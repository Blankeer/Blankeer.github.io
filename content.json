[{"title":"[Huginn]我在 slack 发条消息,然后我的 vps 就重启了","date":"2018-03-21T16:43:51.000Z","path":"2018/03/22/Huginn-我在-slack-发条消息-然后我的-vps-就重启了/","text":"需求有时候重启 vps,需要登录在网页上操作,很麻烦,查了下有相关的 api 做这个事,最好是我在 slack 里发条消息(重启 xx 主机),然后自动重启. 重点实现的重点是 怎么让 Huginn 收到 slack 的消息,huginn 上的 slack agent 是发送消息到 slack, 而不能反过来,查了下 slack 文档,能实现的是 bot 和 app,决定采用 app 实现首先在 huginn 创建 WebhookAgent,options 如下:1234567&#123; \"secret\": \"123456\",//这里随便填 \"expected_receive_period_in_days\": 1, \"payload_path\": \".\", \"code\": \"200\", \"response\": \"&#123;&#123;challenge&#125;&#125;\"&#125; response 必须是,然后创建,可以看到 webhook api url ,一般是这种形式 http://1.2.3.4/users/1/web_requests/1/123456, 记下来,下一步会用.然后在 slack 创建 app, 然后创建 Event Subscriptions, image.png 然后填上上一步的 url, 添加 event, 填写 url 后会检查,如果失败,请检查上一步创建的 agent. image.png install APP, 然后授权下 image.png 以上步骤就 ok 了,然后你在公共 channel 里发条消息,检查下 agent events 有没有相关 event,类似这样: image.png 然后写一个 trigger agent 过滤出重启 的消息,然后传递给一个 Post agent去调用 vps 的 API,测试下就 ok 了.","tags":[{"name":"Huginn","slug":"Huginn","permalink":"https://blankeer.github.io/tags/Huginn/"},{"name":"VPS","slug":"VPS","permalink":"https://blankeer.github.io/tags/VPS/"},{"name":"Slack","slug":"Slack","permalink":"https://blankeer.github.io/tags/Slack/"}]},{"title":"Huginn 监控天气情况","date":"2018-03-21T16:42:14.000Z","path":"2018/03/22/Huginn-监控天气情况/","text":"需求监控天气是入门 agent 了,官方例子也有,我使用国内天气源,实现每两个小时通知我天气情况(温度,天气, pm2.5等) API天气情况当然得找 API 了,使用了这个 repo 里的 实现1234567891011121314151617181920212223&#123; \"expected_update_period_in_days\": \"2\", \"url\": \"http://tj.nineton.cn/Heart/index/all?city=替换成自己城市 code\", \"type\": \"json\", \"mode\": \"on_change\", \"extract\": &#123; \"city_name\": &#123; \"path\": \"weather[0].city_name\" &#125;, \"now_info\": &#123; \"path\": \"weather[0].now.text\" &#125;, \"temperature\": &#123; \"path\": \"weather[0].now.temperature\" &#125;, \"pm25\": &#123; \"path\": \"weather[0].now.air_quality.city.pm25\" &#125;, \"air_quality\": &#123; \"path\": \"weather[0].now.air_quality.city.quality\" &#125; &#125;&#125; 通知通知到 slack / email 就可以了.","tags":[{"name":"Huginn","slug":"Huginn","permalink":"https://blankeer.github.io/tags/Huginn/"},{"name":"天气","slug":"天气","permalink":"https://blankeer.github.io/tags/天气/"},{"name":"监控","slug":"监控","permalink":"https://blankeer.github.io/tags/监控/"}]},{"title":"Huginn 监控甩甩尾巴物品","date":"2018-03-21T16:40:18.000Z","path":"2018/03/22/Huginn-监控甩甩尾巴物品/","text":"需求当数字尾巴的甩甩尾巴有指定物品发布时,通知我! 实现 甩甩尾巴首页:http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=1,page 参数是页码,可以同时抓取2-3页,以免时间间隔过大发布的物品太多导致爬不到. 抓取每个物品的标题,url,地址,价格,时间,是否交易完成,提取这几个属性,使用 xpath 或者 css selector,在 w3c 上都有相关教程,推荐两个 chrome 插件,可以检查表达式的结果,CSS Selector Tester,XPath Helper 提取数据,通过 chrome 开发者工具,可以粗略提取下,然后自己修改下表达式,基本就可以了,通过上面的插件测试下,基本就差不多了. image.png 贴上我写好的配置文件,新建一个 Website Agent 导入就可以了. 123456789101112131415161718192021222324252627282930313233343536&#123; \"expected_update_period_in_days\": \"2\", \"url\": [ \"http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=1\", \"http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=2\", \"http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=3\" ], \"type\": \"html\", \"mode\": \"on_change\", \"extract\": &#123; \"title\": &#123; \"css\": \"div.tradetop &gt; p.tradetitle &gt; a\", \"value\": \"string(.)\" &#125;, \"info\": &#123; \"xpath\": \"//*[@id=\\\"wp\\\"]/div[3]/div/p[1]/.\", \"value\": \"normalize-space(.)\" &#125;, \"state\": &#123; \"css\": \"div.tradepic\", \"value\": \"not(contains(@class,'comp'))\" &#125;, \"date\": &#123; \"css\": \".tradedateline\", \"value\": \"string(.)\" &#125;, \"img\": &#123; \"css\": \".tradepic &gt; a &gt; img\", \"value\": \"@src\" &#125;, \"url\": &#123; \"css\": \".tradepic &gt; a\", \"value\": \"concat('http://trade.dgtle.com',@href)\" &#125; &#125;&#125; 过滤指定物品,需要创建一个Trigger Agent,过滤出小米相关物品,只要标题包含这个关键字就可以了,代码: 123456789101112&#123; \"expected_receive_period_in_days\": \"2\", \"keep_event\": \"true\", \"rules\": [ &#123; \"type\": \"regex\", \"value\": \"小米\", \"path\": \"title\" &#125; ], \"message\": \"甩甩尾巴有关 `小米` 的物品更新了\"&#125; 将 event 通知到 Slack, 也可以邮件或者其他.","tags":[{"name":"Huginn","slug":"Huginn","permalink":"https://blankeer.github.io/tags/Huginn/"},{"name":"监控","slug":"监控","permalink":"https://blankeer.github.io/tags/监控/"},{"name":"数字尾巴","slug":"数字尾巴","permalink":"https://blankeer.github.io/tags/数字尾巴/"},{"name":"甩甩尾巴","slug":"甩甩尾巴","permalink":"https://blankeer.github.io/tags/甩甩尾巴/"}]},{"title":"Huginn 安装笔记","date":"2018-03-21T16:37:32.000Z","path":"2018/03/22/Huginn-安装笔记/","text":"安装我用的 ubuntu + mysql, 按照教程安装,中途出现了很多问题,遇到问题搜索,好不容易才解决.机器配置是 1核+ 2G,日常CPU占用&lt;5%,内存50%,内存用的比较多, cpu 用的比较少,可能是我的 agent 不多吧. 使用通知通知尝试过 email slack pushbullet, 最终选择了 slack, 主要原因是: 便于管理,同类型的 event 放在同一个 channel 里,而且网络通畅 编写可以先在这里看下,有一些共享出来的scenarios,就算需求不同,也可以学习下 agent 编写的语法,很有帮助. 遇到的问题和解决 bundle install error “invalid byte sequence in US-ASCII (ArgumentError)” 可以先执行这个设置语言 123export LC_ALL=C.UTF-8export LANG=en_US.UTF-8export LANGUAGE=en_US.UTF-8 An error occurred while installing nokogiri (1.6.7.1), and Bundler cannot continue sudo apt-get install build-essential patch ruby-dev zlib1g-dev liblzma-dev 需要 swap 分区 搜索”阿里云开启 swap”,https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04 diagram加载不出来,挂掉 原因是访问不了 google 的 api,办法是下载离线的graphviz安装,.env修改USE_GRAPHVIZ_DOT=dot,重新执行sudo bundle exec rake production:export 参考:https://github.com/huginn/huginn/issues/2109 css 资源挂掉,界面很丑 先编译资源,sudo -u huginn -H bundle exec rake assets:precompile RAILS_ENV=production,直接重启,sudo bundle exec rake production:restart Mysql 设置 Innodb 出现 Unknown system variable ‘storage_engine 在/etc/mysql/my.cnf 中设置 [mysqld] default-storage-engine = InnoDB 时区设置 Schedule 的时间不是北京时间,.env修改 TIMEZONE=”Beijing” ​","tags":[{"name":"Huginn","slug":"Huginn","permalink":"https://blankeer.github.io/tags/Huginn/"}]},{"title":"Huginn Docker 安装笔记","date":"2018-03-21T16:29:14.000Z","path":"2018/03/22/Huginn-Docker-安装笔记/","text":"官方文档:https://github.com/huginn/huginn/blob/master/doc/docker/install.md官方文档没有详细说明 Docker 怎么和本机数据库连接的,以下是记录. 安装 Docker安装官方文档安装 安装 MySQL安装完成后的配置: 修改绑定 IP 为0.0.0.0, 修改/etc/mysql/mysql.conf.d/mysqld.cnf,bind-address = 0.0.0.0,重启 sudo service mysql restart 允许 docker 访问本机数据库,本机先执行ifconfig看下 docker0 的 ip,一般是172.17.0.1,那么 docker ip 为172.17.0.*,这里自己看情况修改.然后在数据库里给这个网段 IP 操作权限,12GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.17.0.%' IDENTIFIED BY 'pass' WITH GRANT OPTION;flush privileges; 安装 Huginn 首次安装:1234567docker run --name huginn \\ -p 3000:3000 \\ -e MYSQL_PORT_3306_TCP_ADDR=172.17.0.1 \\ -e HUGINN_DATABASE_NAME=huginn \\ -e HUGINN_DATABASE_USERNAME=root \\ -e HUGINN_DATABASE_PASSWORD=pass \\ huginn/huginn 如果安装中数据库报错,看下原因修改.安装完成后,打开本机3000端口就可以进入首页.之后再打开,直接 docker start huginn就行了. 设置开机自启动:docker update --restart=always huginn 自定义 .env.example 文件在 docker run 下面加入 12docker run --name huginn \\ --env-file /本地路径/.env.example \\","tags":[{"name":"Huginn","slug":"Huginn","permalink":"https://blankeer.github.io/tags/Huginn/"},{"name":"Docker","slug":"Docker","permalink":"https://blankeer.github.io/tags/Docker/"}]},{"title":"Hello World","date":"2018-03-21T11:59:30.193Z","path":"2018/03/21/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]