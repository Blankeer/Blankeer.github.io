<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blanke&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/a9c7e5a3bfa0cace482d88e9c8fc7a88</icon>
  <subtitle>Blanke&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blankeer.github.io/"/>
  <updated>2018-05-09T16:50:42.046Z</updated>
  <id>https://blankeer.github.io/</id>
  
  <author>
    <name>Blanke</name>
    <email>blankeeee@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用 Xposed 快速实现一个简易微信机器人</title>
    <link href="https://blankeer.github.io/2018/05/09/%E5%88%A9%E7%94%A8-Xposed-%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>https://blankeer.github.io/2018/05/09/利用-Xposed-快速实现一个简易微信机器人/</id>
    <published>2018-05-09T05:26:00.000Z</published>
    <updated>2018-05-09T16:50:42.046Z</updated>
    
    <content type="html"><![CDATA[<p>本文同步至：<a href="https://www.jianshu.com/p/8d0d0b52bec6" target="_blank" rel="noopener">https://www.jianshu.com/p/8d0d0b52bec6</a></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>当前微信网页版限制越来越多，考虑尝试在手机上实现类似机器人的功能。本文目的是利用 Xposed 快速实现简易机器人功能，包括获取好友发来的消息，以及回复消息。后续可以增加智能回复，比如接入图灵机器人，或者自己自定义实现一些功能。</p><h1 id="快速实现"><a href="#快速实现" class="headerlink" title="快速实现"></a>快速实现</h1><h2 id="项目框架的搭建"><a href="#项目框架的搭建" class="headerlink" title="项目框架的搭建"></a>项目框架的搭建</h2><h3 id="WechatSpellbook-站在”巨人”的肩膀上"><a href="#WechatSpellbook-站在”巨人”的肩膀上" class="headerlink" title="WechatSpellbook - 站在”巨人”的肩膀上"></a>WechatSpellbook - 站在”巨人”的肩膀上</h3><p><a href="https://github.com/Gh0u1L5/WechatSpellbook/" target="_blank" rel="noopener">WechatSpellbook</a> 是微信巫师作者在微信巫师的基础提取出来的通用微信 Xposed 插件框架。它提供了友好的的 API，提供自动分析微信内部结构特征的API(忽略微信版本差异)，对 hook 微信出现的常见问题都做了优化，总之就是使用它会更容易对微信 hook，感谢作者的贡献，项目的集成和详细介绍参见<a href="https://github.com/Gh0u1L5/WechatSpellbook/wiki/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B" target="_blank" rel="noopener">wiki</a>，以下步骤的实现都是基于这个框架的。<br>以下源码均基于微信 6.6.6 版本，由于使用了 WechatSpellbook 框架动态匹配的原理，大部分微信版本均可自动适配。</p><h3 id="获得好友发来的消息"><a href="#获得好友发来的消息" class="headerlink" title="获得好友发来的消息"></a>获得好友发来的消息</h3><p>实现机器人功能的首要步骤就是获得好友发来的消息，获得消息之后才能回复吧，才能叫“机器人”吧。<br>使用了 WechatSpellbook，获取消息是很容易的，参见<a href="https://github.com/Gh0u1L5/WechatSpellbook/blob/master/src/main/kotlin/com/gh0u1l5/wechatmagician/spellbook/interfaces/IMessageStorageHook.kt#L27" target="_blank" rel="noopener">api</a>，当新消息存入数据库后回调，具体代码：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> WechatMessageHook : IMessageStorageHook &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMessageStorageInserted</span><span class="params">(msgId: <span class="type">Long</span>, msgObject: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        XposedBridge.log(<span class="string">"onMessageStorageInserted msgId=<span class="variable">$msgId</span>,msgObject=<span class="variable">$msgObject</span>"</span>)</span><br><span class="line">        <span class="comment">// 这些都是消息的属性，内容，发送人，类型等</span></span><br><span class="line">        <span class="keyword">val</span> field_content = XposedHelpers.getObjectField(msgObject, <span class="string">"field_content"</span>) <span class="keyword">as</span> String?</span><br><span class="line">        <span class="keyword">val</span> field_talker = XposedHelpers.getObjectField(msgObject, <span class="string">"field_talker"</span>) <span class="keyword">as</span> String?</span><br><span class="line">        <span class="keyword">val</span> field_type = (XposedHelpers.getObjectField(msgObject, <span class="string">"field_type"</span>) <span class="keyword">as</span> <span class="built_in">Int</span>).toInt()</span><br><span class="line">        <span class="keyword">val</span> field_isSend = (XposedHelpers.getObjectField(msgObject, <span class="string">"field_isSend"</span>) <span class="keyword">as</span> <span class="built_in">Int</span>).toInt()</span><br><span class="line">        XposedBridge.log(<span class="string">"field_content=<span class="variable">$field_content</span>,field_talker=<span class="variable">$field_talker</span>,"</span> +</span><br><span class="line">                <span class="string">"field_type=<span class="variable">$field_type</span>,field_isSend=<span class="variable">$field_isSend</span>"</span>)</span><br><span class="line">        <span class="keyword">if</span> (field_isSend == <span class="number">1</span>) &#123;<span class="comment">// 代表自己发出的，不处理</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 做其他事情</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中字段名含义如下：</p><ul><li>field_content： 消息内容</li><li>field_talker： 发送者</li><li>field_type： 消息类型</li><li>field_isSend： 是谁发出的，我自己发出为1<br>这步到此就完成了，下一步是机器人怎么将消息回复给好友。</li></ul><h3 id="机器人回复消息"><a href="#机器人回复消息" class="headerlink" title="机器人回复消息"></a>机器人回复消息</h3><p>机器人回复消息需要找到发送消息出去这个 API，然后 hook 它，在我们的代码里调用就行了。</p><h4 id="利用-Monitor-的-Method-Profiling-功能分析"><a href="#利用-Monitor-的-Method-Profiling-功能分析" class="headerlink" title="利用 Monitor 的 Method Profiling 功能分析"></a>利用 Monitor 的 Method Profiling 功能分析</h4><p>首先在模拟器中打开微信聊天窗口，打开 Monitor，选中微信进程，点击<code>Start Method Profiling</code>，然后在聊天窗口随便发送一条消息，然后回来点击<code>Stop Method Profiling</code>，会生成分析文件。分析步骤如下：</p><ol><li>先搜索 click，点击发送按钮，肯定是触发了点击事件的嘛，先找找看<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1340121-d6779724831e3dcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure></li><li>发现调用了 <code>ChatFooter$3.onClick()</code> 方法，单从名字上来看，应该就是这里了，点进去，看这个函数调用了哪里<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1340121-02717958e085a261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure></li><li>它调用了 <code>chatting.o.FZ</code> 方法，注意参数是 String，返回值是 Boolean，大胆猜测一下，这个字符串就是消息文本，返回值应该是发送是否成功。验证一下，直接 Hook 这个函数，运行发现猜测是真的，这里比较简单就不贴代码了。</li><li>分析到这里，已经知道了<code>chatting.o.FZ</code> 方法就是发送消息的，参数就是消息文本，但是有个很重要的地方忽略了，<em>为什么没有接收者参数？</em>，微信内部联系人 ID 一般是以 wx_idxxx 开头的，接收者 id 设置在哪，怎么设置 hook，现在就差这个问题了。<br>到这里已经知道了发送消息的 API，hook 掉就可以搞事情了，但是缺少接收者这个重要参数的设置，分析下源码吧。</li></ol><h4 id="反编译查看源码分析"><a href="#反编译查看源码分析" class="headerlink" title="反编译查看源码分析"></a>反编译查看源码分析</h4><p>反编译之后分析 <code>chatting.o.FZ</code> 方法源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">FZ</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">     mS(<span class="keyword">false</span>);</span><br><span class="line">     ctQ();</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.yOg.yRO.dt(str, <span class="number">0</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>然后分析<code>yOg.yRO.dt</code>方法，它是<code>com.tencent.mm.ui.chatting.b</code>类的方法，看下源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">dt</span><span class="params">(String str, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">    String Xf = bh.Xf(str);</span><br><span class="line">    <span class="keyword">if</span> (Xf == <span class="keyword">null</span> || Xf.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        w.e(<span class="string">"MicroMsg.ChattingUI.TextImp"</span>, <span class="string">"doSendMessage null"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x xVar = <span class="keyword">this</span>.yXC;</span><br><span class="line">    <span class="keyword">if</span> (!ah.oB(Xf)) &#123;</span><br><span class="line">        az azVar = <span class="keyword">new</span> az();</span><br><span class="line">        azVar.setContent(Xf);</span><br><span class="line">        azVar.eW(<span class="number">1</span>);</span><br><span class="line">        xVar.aB(azVar);</span><br><span class="line">    &#125;</span><br><span class="line">    bt btVar = <span class="keyword">new</span> bt();</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到在<code>azVar.setContent(Xf);</code>这里将发送的消息文本放在放在了az这个类中，setContent() 是 az 的父类<code>com.tencent.mm.g.c.cg</code>的方法，看下这个类的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 截取了几个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">av</span><span class="params">(<span class="keyword">long</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.field_createTime = j;</span><br><span class="line">    <span class="keyword">this</span>.eRw = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">wQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.field_createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">ed</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.field_talker = str;</span><br><span class="line">    <span class="keyword">this</span>.feh = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">wR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.field_talker;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.field_content = str;</span><br><span class="line">    <span class="keyword">this</span>.eRE = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只截取了几个方法，可以看到这个类不仅仅包含消息文本，还包含了接受者<code>field_talker</code>，发送时间<code>field_createTime</code>等，大胆猜想，这个类就是消息的包装类，包含消息所有的属性，这里关注的字段是接收者 field_talker，只要知道在哪里调用了<code>ed</code>方法 hook 掉就可以为所欲为了。<br>但是，通过 AS 查找调用这个的地方有很多，根本无法判断具体发消息是哪里调用了，怎么办。<br>借助 Xposed 分析<code>com.tencent.mm.g.c.cg.ed()</code>方法，也就是设置接收者 field_talker 的方法，只要 hook 这个方法，然后打印出调用堆栈看看到底是哪里回调了。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> clz = XposedHelpers.findClass(<span class="string">"com.tencent.mm.g.c.cg"</span>, WechatGlobal.wxLoader)</span><br><span class="line">XposedHelpers.findAndHookMethod(clz, <span class="string">"ed"</span>, String::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">object : XC_MethodHook</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeHookedMethod</span><span class="params">(param: <span class="type">MethodHookParam</span>?)</span></span> &#123;</span><br><span class="line">        log(<span class="string">"set field_talker start"</span>)</span><br><span class="line">        LogUtil.logStackTraces() <span class="comment">// 打印调用堆栈</span></span><br><span class="line">        log(<span class="string">"set field_talker end"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>打印结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1340121-24322dc99cd7282d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>可以看到函数调用链，关键点在<code>com.tencent.mm.modelmulti.i.&lt;init&gt;</code>，看下这个方法的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">i</span><span class="params">(String str, String str2, <span class="keyword">int</span> i, <span class="keyword">int</span> i2, Object obj)</span> </span>&#123;</span><br><span class="line">    w.d(<span class="string">"MicroMsg.NetSceneSendMsg"</span>, <span class="string">"dktext :%s"</span>, <span class="keyword">new</span> Object[]&#123;bh.cjG()&#125;);</span><br><span class="line">    <span class="keyword">if</span> (!bh.oB(str)) &#123;</span><br><span class="line">        cg azVar = <span class="keyword">new</span> az();</span><br><span class="line">        azVar.eV(<span class="number">1</span>);</span><br><span class="line">        azVar.ed(str);</span><br><span class="line">        azVar.av(bd.in(str));</span><br><span class="line">        azVar.eW(<span class="number">1</span>);</span><br><span class="line">        azVar.setContent(str2);</span><br><span class="line">        azVar.setType(i);</span><br><span class="line">        String a = a(((o) g.l(o.class)).s(azVar), obj, i2);</span><br><span class="line">        <span class="keyword">if</span> (!bh.oB(a)) &#123;</span><br><span class="line">            azVar.ej(a);</span><br><span class="line">            w.d(<span class="string">"MicroMsg.NetSceneSendMsg"</span>, <span class="string">"NetSceneSendMsg:MsgSource:%s"</span>, <span class="keyword">new</span> Object[]&#123;azVar.fnF&#125;);</span><br><span class="line">    <span class="comment">// 省略很多代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这个类的构造方法实例化了<code>cg azVar = new az();</code>，并调用了<code>ed()</code>方法。分析下这个构造函数，很有意思的是：参数 str 就是微信 id，str2是文本内容，后几个不知道，大胆猜测下这个类就是去发送消息的，从源码很难分析，hook 掉看看。<br>hook <code>com.tencent.mm.modelmulti.i</code>的构造方法打印参数，看下是否和发送消息有关。这里就不贴代码和截图了，结论是有关。那可以 hook 这个类的构造方法发送消息啊。</p><h4 id="找到的-hook-关键点"><a href="#找到的-hook-关键点" class="headerlink" title="找到的 hook 关键点"></a>找到的 hook 关键点</h4><ol><li><code>com.tencent.mm.ui.chatting.o.FZ(String)</code> 方法，参数是消息文本，调用该方法可以发消息，但是无法设置接收者</li><li><code>com.tencent.mm.modelmulti.i()</code>构造方法，第0个参数是接收者 id，第1个参数是消息文本</li></ol><p>机器人回复消息思路：调用第一个 API 发送消息文本，hook 第二个 API 修改接收者 id，然后就可以愉快的发消息了</p><h4 id="关键点存在的问题"><a href="#关键点存在的问题" class="headerlink" title="关键点存在的问题"></a>关键点存在的问题</h4><p>上述 hook 思路存在的问题：当 hook 第二个API 时，不知道该条消息的接收者是谁，不太好设置。</p><h4 id="问题解决方法"><a href="#问题解决方法" class="headerlink" title="问题解决方法"></a>问题解决方法</h4><p>既然我能 hook 这两个 API，那么我可不可以直接在调用第一个 API 的时候，将接收者 id 放在文本消息前面，然后在 hook 第二个 API 时将文本消息中的接收者 id 解析出来赋值给第0个参数。<br>新消息文本 = 接收者ID + 分隔符号 + 真实消息文本<br>分割符号可以采用特殊字符，用户不会输入的字符，比如 \t 等</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><a href="https://github.com/Blankeer/WechatBotXposed" target="_blank" rel="noopener">源码</a>在这里，关键地方都有注释，有兴趣可以 star</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1340121-3c4d1e968e8f7062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文同步至：&lt;a href=&quot;https://www.jianshu.com/p/8d0d0b52bec6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/8d0d0b52bec6&lt;/a&gt;&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
      <category term="Xposed" scheme="https://blankeer.github.io/categories/Xposed/"/>
    
    
      <category term="Xposed" scheme="https://blankeer.github.io/tags/Xposed/"/>
    
      <category term="微信" scheme="https://blankeer.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Xposed 模块免重启开发(借助VirtualXposed)</title>
    <link href="https://blankeer.github.io/2018/05/09/Xposed-%E6%A8%A1%E5%9D%97%E5%85%8D%E9%87%8D%E5%90%AF%E5%BC%80%E5%8F%91-%E5%80%9F%E5%8A%A9VirtualXposed/"/>
    <id>https://blankeer.github.io/2018/05/09/Xposed-模块免重启开发-借助VirtualXposed/</id>
    <published>2018-05-09T04:31:05.000Z</published>
    <updated>2018-05-09T04:57:38.818Z</updated>
    
    <content type="html"><![CDATA[<p>本文同步至：<a href="https://www.jianshu.com/p/938e8c4c00df" target="_blank" rel="noopener">https://www.jianshu.com/p/938e8c4c00df</a></p><h1 id="Xposed-模块开发痛点"><a href="#Xposed-模块开发痛点" class="headerlink" title="Xposed 模块开发痛点"></a>Xposed 模块开发痛点</h1><p>Xposed 模块修改之后是需要重启手机生效的，导致开发非常麻烦，改个代码运行还要重启，等待时间太长。</p><h1 id="现有的方案"><a href="#现有的方案" class="headerlink" title="现有的方案"></a>现有的方案</h1><p>搜索了一下，有现成的方案，原理大多是修改 Xposed FrameWork 源码实现，还有一种思路是动态加载。但都有点麻烦，还存在一些问题，偶尔失效只能重启。<br>参考：<br><a href="https://github.com/shuihuadx/XposedHook" target="_blank" rel="noopener">https://github.com/shuihuadx/XposedHook</a><br><a href="https://www.jianshu.com/p/d5596196bd12" target="_blank" rel="noopener">https://www.jianshu.com/p/d5596196bd12</a><br><a href="https://bbs.pediy.com/thread-223713.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-223713.htm</a><br><a href="http://androidwing.net/index.php/274" target="_blank" rel="noopener">http://androidwing.net/index.php/274</a></p><h1 id="VirtualXposed-方案"><a href="#VirtualXposed-方案" class="headerlink" title="VirtualXposed 方案"></a>VirtualXposed 方案</h1><p><a href="https://github.com/android-hacker/VirtualXposed" target="_blank" rel="noopener">VirtualXposed</a> 主要功能是在非ROOT环境下运行Xposed模块。使用之后觉得它比较适合模块开发，原因几下几点：</p><ol><li>支持免重启手机激活模块</li><li>对开发者友好，详见 <a href="https://github.com/android-hacker/VirtualXposed/wiki/Utilities-For-Xposed-Module-Developer" target="_blank" rel="noopener">wiki</a></li><li>项目开源，作者很活跃，遇到什么问题很快可以得到答复</li></ol><p>但是还是有一些缺点的：</p><ol><li>不支持 x86，也就是不支持模拟器，只能使用真机</li><li>暂不支持资源HOOK</li><li>部分插件的兼容性有问题</li><li>不能 hook 系统 API</li><li>使用必须将需要 hook 的 APP 和模块 APP 安装到VirtualXposed</li></ol><p>如果以上缺点提到的有涉及的就不能使用该方案</p><h2 id="Gradle-Task-实现自动重启-VirtualXposed，自动更新模块"><a href="#Gradle-Task-实现自动重启-VirtualXposed，自动更新模块" class="headerlink" title="Gradle Task 实现自动重启 VirtualXposed，自动更新模块"></a>Gradle Task 实现自动重启 VirtualXposed，自动更新模块</h2><p>以下配置环境是 Android Studio<br><a href="https://github.com/android-hacker/VirtualXposed/wiki/Utilities-For-Xposed-Module-Developer" target="_blank" rel="noopener">wiki</a> 里提供重启 VirtualXposed 、自动更新 APP，打开某 APP 的广播方式。利用这些可以编写Gradle Task 实现运行项目自动更新模块 APP，自动重启VirtualXposed，自动打开需要 hook 的 APP。<br>需要先将需要 hook 的 APP 和模块先安装到 VirtualXposed，再进行以下设置：</p><ol><li>将 Debug Configurations 里将 Gradle aware Make - 修改为 :app:installDebug<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/1340121-bd38cde2cf2897b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure></li><li>修改 app/build.gradle 文件，在最下面增加如下代码<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123;</span><br><span class="line">    installDebug.<span class="keyword">doLast</span> &#123;</span><br><span class="line">        updateVirtualXposedAPP.execute()</span><br><span class="line">        rebootVirtualXposedAPP.execute()</span><br><span class="line">        launchVirtualXposedAPP.execute()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新 VXP 中的 app</span></span><br><span class="line"><span class="keyword">task</span> updateVirtualXposedAPP(type: Exec) &#123;</span><br><span class="line">    <span class="keyword">def</span> pkg = android.defaultConfig.applicationId</span><br><span class="line">    commandLine android.adbExecutable, <span class="string">'shell'</span>, <span class="string">'am'</span>, <span class="string">'broadcast'</span>, <span class="string">'-a'</span>, <span class="string">'io.va.exposed.CMD'</span>, <span class="string">'-e'</span>, <span class="string">'cmd'</span>, <span class="string">'update'</span>, <span class="string">'-e'</span>, <span class="string">'pkg'</span>, pkg</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重启 VXP</span></span><br><span class="line"><span class="keyword">task</span> rebootVirtualXposedAPP(type: Exec) &#123;</span><br><span class="line">    commandLine android.adbExecutable, <span class="string">'shell'</span>, <span class="string">'am'</span>, <span class="string">'broadcast'</span>, <span class="string">'-a'</span>, <span class="string">'io.va.exposed.CMD'</span>, <span class="string">'-e'</span>, <span class="string">'cmd'</span>, <span class="string">'reboot'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重启 VXP 需要 hook 的 APP，需要知道它的包名</span></span><br><span class="line"><span class="keyword">task</span> launchVirtualXposedAPP(type: Exec) &#123;</span><br><span class="line">    <span class="keyword">def</span> pkg = <span class="string">'com.tencent.mm'</span><span class="comment">// 需要 hook 的 app，这里是微信</span></span><br><span class="line">    commandLine android.adbExecutable, <span class="string">'shell'</span>, <span class="string">'am'</span>, <span class="string">'broadcast'</span>, <span class="string">'-a'</span>, <span class="string">'io.va.exposed.CMD'</span>, <span class="string">'-e'</span>, <span class="string">'cmd'</span>, <span class="string">'launch'</span>, <span class="string">'-e'</span>, <span class="string">'pkg'</span>, pkg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>具体代码参见：<a href="https://github.com/Blankeer/MDWechat/blob/master/app/build.gradle#L45" target="_blank" rel="noopener">MDWechat</a><br>原理就是利用 Gradle Task 使用 adb  发送广播。<br>以上配置好就可以愉快的敲代码了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文同步至：&lt;a href=&quot;https://www.jianshu.com/p/938e8c4c00df&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/938e8c4c00df&lt;/a&gt;&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
      <category term="Xposed" scheme="https://blankeer.github.io/categories/Xposed/"/>
    
    
      <category term="Xposed" scheme="https://blankeer.github.io/tags/Xposed/"/>
    
      <category term="VirtualXposed" scheme="https://blankeer.github.io/tags/VirtualXposed/"/>
    
  </entry>
  
  <entry>
    <title>[Huginn]我在 slack 发条消息,然后我的 vps 就重启了</title>
    <link href="https://blankeer.github.io/2018/03/22/Huginn-%E6%88%91%E5%9C%A8-slack-%E5%8F%91%E6%9D%A1%E6%B6%88%E6%81%AF-%E7%84%B6%E5%90%8E%E6%88%91%E7%9A%84-vps-%E5%B0%B1%E9%87%8D%E5%90%AF%E4%BA%86/"/>
    <id>https://blankeer.github.io/2018/03/22/Huginn-我在-slack-发条消息-然后我的-vps-就重启了/</id>
    <published>2018-03-21T16:43:51.000Z</published>
    <updated>2018-03-21T16:44:39.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有时候重启 vps,需要登录在网页上操作,很麻烦,查了下有相关的 <a href="https://www.alibabacloud.com/help/zh/doc-detail/25502.htm?spm=a3c0i.o25485zh.a3.16.18627bd1b51rF5" target="_blank" rel="noopener">api</a> 做这个事,最好是我在 slack 里发条消息(重启 xx 主机),然后自动重启.</p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>实现的重点是 怎么让 Huginn 收到 slack 的消息,huginn 上的 slack agent 是发送消息到 slack, 而不能反过来,查了下 slack 文档,能实现的是 <a href="https://api.slack.com/bot-users" target="_blank" rel="noopener">bot</a> 和 <a href="https://api.slack.com/slack-apps" target="_blank" rel="noopener">app</a>,决定采用 app</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先在 huginn 创建 <code>WebhookAgent</code>,options 如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "secret": "123456",//这里随便填</span><br><span class="line">  "expected_receive_period_in_days": 1,</span><br><span class="line">  "payload_path": ".",</span><br><span class="line">  "code": "200",</span><br><span class="line">  "response": "&#123;&#123;challenge&#125;&#125;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>response 必须是<code></code>,然后创建,可以看到 webhook api url ,一般是这种形式 <a href="http://1.2.3.4/users/1/web_requests/1/123456" target="_blank" rel="noopener">http://1.2.3.4/users/1/web_requests/1/123456</a>, 记下来,下一步会用.<br>然后在 slack 创建 app, 然后创建 Event Subscriptions,<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1340121-37da6845c7df611f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>然后填上上一步的 url, 添加 event, 填写 url 后会检查,如果失败,请检查上一步创建的 agent.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1340121-b39fb2b07a3871b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>install APP, 然后授权下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1340121-eb52e6cfc886dfdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>以上步骤就 ok 了,然后你在公共 channel 里发条消息,检查下 agent events 有没有相关 event,类似这样:<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1340121-ebe61920ae3c44b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>然后写一个 <code>trigger agent</code> 过滤出<code>重启</code> 的消息,然后传递给一个 <code>Post agent</code>去调用 vps 的 API,测试下就 ok 了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;有时候重启 vps,需要登录在网页上操作,很麻烦,查了下有相关的 &lt;a href=&quot;https://www.alibabacloud.com
      
    
    </summary>
    
      <category term="Huginn" scheme="https://blankeer.github.io/categories/Huginn/"/>
    
    
      <category term="Huginn" scheme="https://blankeer.github.io/tags/Huginn/"/>
    
      <category term="VPS" scheme="https://blankeer.github.io/tags/VPS/"/>
    
      <category term="Slack" scheme="https://blankeer.github.io/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title>Huginn 监控天气情况</title>
    <link href="https://blankeer.github.io/2018/03/22/Huginn-%E7%9B%91%E6%8E%A7%E5%A4%A9%E6%B0%94%E6%83%85%E5%86%B5/"/>
    <id>https://blankeer.github.io/2018/03/22/Huginn-监控天气情况/</id>
    <published>2018-03-21T16:42:14.000Z</published>
    <updated>2018-03-21T16:42:34.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>监控天气是入门 agent 了,官方例子也有,我使用国内天气源,实现每两个小时通知我天气情况(温度,天气, pm2.5等)</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>天气情况当然得找 API 了,使用了这个 <a href="https://github.com/jokermonn/-Api/blob/master/CenterWeather.md" target="_blank" rel="noopener">repo</a> 里的</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"expected_update_period_in_days"</span>: <span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"http://tj.nineton.cn/Heart/index/all?city=替换成自己城市 code"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"json"</span>,</span><br><span class="line">  <span class="attr">"mode"</span>: <span class="string">"on_change"</span>,</span><br><span class="line">  <span class="attr">"extract"</span>: &#123;</span><br><span class="line">    <span class="attr">"city_name"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"weather[0].city_name"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"now_info"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"weather[0].now.text"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"temperature"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"weather[0].now.temperature"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"pm25"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"weather[0].now.air_quality.city.pm25"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"air_quality"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"weather[0].now.air_quality.city.quality"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>通知到 slack / email 就可以了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;监控天气是入门 agent 了,官方例子也有,我使用国内天气源,实现每两个小时通知我天气情况(温度,天气, pm2.5等)&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="Huginn" scheme="https://blankeer.github.io/categories/Huginn/"/>
    
    
      <category term="Huginn" scheme="https://blankeer.github.io/tags/Huginn/"/>
    
      <category term="天气" scheme="https://blankeer.github.io/tags/%E5%A4%A9%E6%B0%94/"/>
    
      <category term="监控" scheme="https://blankeer.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Huginn 监控甩甩尾巴物品</title>
    <link href="https://blankeer.github.io/2018/03/22/Huginn-%E7%9B%91%E6%8E%A7%E7%94%A9%E7%94%A9%E5%B0%BE%E5%B7%B4%E7%89%A9%E5%93%81/"/>
    <id>https://blankeer.github.io/2018/03/22/Huginn-监控甩甩尾巴物品/</id>
    <published>2018-03-21T16:40:18.000Z</published>
    <updated>2018-03-21T16:41:10.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>当数字尾巴的甩甩尾巴有指定物品发布时,通知我!</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>甩甩尾巴首页:<a href="http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=1,page" target="_blank" rel="noopener">http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=1,page</a> 参数是页码,可以同时抓取2-3页,以免时间间隔过大发布的物品太多导致爬不到.</li><li>抓取每个物品的标题,url,地址,价格,时间,是否交易完成,提取这几个属性,使用 xpath 或者 css selector,在 w3c 上都有相关教程,推荐两个 chrome 插件,可以检查表达式的结果,<a href="https://chrome.google.com/webstore/detail/css-selector-tester/bbklnaodgoocmcdejoalmbjihhdkbfon" target="_blank" rel="noopener">CSS Selector Tester</a>,<a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl" target="_blank" rel="noopener">XPath Helper</a></li><li>提取数据,通过 chrome 开发者工具,可以粗略提取下,然后自己修改下表达式,基本就可以了,通过上面的插件测试下,基本就差不多了.<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1340121-f176a8bbecb5fa95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure></li><li><p>贴上我写好的配置文件,新建一个 Website Agent 导入就可以了.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"expected_update_period_in_days"</span>: <span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: [</span><br><span class="line">    <span class="string">"http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=1"</span>,</span><br><span class="line">    <span class="string">"http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=2"</span>,</span><br><span class="line">    <span class="string">"http://trade.dgtle.com/dgtle_module.php?mod=trade&amp;ac=index&amp;typeid=&amp;PName=&amp;searchsort=0&amp;page=3"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"html"</span>,</span><br><span class="line">  <span class="attr">"mode"</span>: <span class="string">"on_change"</span>,</span><br><span class="line">  <span class="attr">"extract"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"css"</span>: <span class="string">"div.tradetop &gt; p.tradetitle &gt; a"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"string(.)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"info"</span>: &#123;</span><br><span class="line">      <span class="attr">"xpath"</span>: <span class="string">"//*[@id=\"wp\"]/div[3]/div/p[1]/."</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"normalize-space(.)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"state"</span>: &#123;</span><br><span class="line">      <span class="attr">"css"</span>: <span class="string">"div.tradepic"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"not(contains(@class,'comp'))"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"date"</span>: &#123;</span><br><span class="line">      <span class="attr">"css"</span>: <span class="string">".tradedateline"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"string(.)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"img"</span>: &#123;</span><br><span class="line">      <span class="attr">"css"</span>: <span class="string">".tradepic &gt; a &gt; img"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"@src"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"url"</span>: &#123;</span><br><span class="line">      <span class="attr">"css"</span>: <span class="string">".tradepic &gt; a"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"concat('http://trade.dgtle.com',@href)"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过滤指定物品,需要创建一个<code>Trigger Agent</code>,过滤出<code>小米</code>相关物品,只要标题包含这个关键字就可以了,代码:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"expected_receive_period_in_days"</span>: <span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"keep_event"</span>: <span class="string">"true"</span>,</span><br><span class="line">  <span class="attr">"rules"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"regex"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"小米"</span>,</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"title"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"甩甩尾巴有关 `小米` 的物品更新了"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将 event 通知到 Slack, 也可以邮件或者其他.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;当数字尾巴的甩甩尾巴有指定物品发布时,通知我!&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Huginn" scheme="https://blankeer.github.io/categories/Huginn/"/>
    
    
      <category term="Huginn" scheme="https://blankeer.github.io/tags/Huginn/"/>
    
      <category term="监控" scheme="https://blankeer.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="数字尾巴" scheme="https://blankeer.github.io/tags/%E6%95%B0%E5%AD%97%E5%B0%BE%E5%B7%B4/"/>
    
      <category term="甩甩尾巴" scheme="https://blankeer.github.io/tags/%E7%94%A9%E7%94%A9%E5%B0%BE%E5%B7%B4/"/>
    
  </entry>
  
  <entry>
    <title>Huginn 安装笔记</title>
    <link href="https://blankeer.github.io/2018/03/22/Huginn-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
    <id>https://blankeer.github.io/2018/03/22/Huginn-安装笔记/</id>
    <published>2018-03-21T16:37:32.000Z</published>
    <updated>2018-03-21T16:38:26.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我用的 ubuntu + mysql, 按照教程安装,中途出现了很多问题,遇到问题搜索,好不容易才解决.<br>机器配置是 1核+ 2G,日常CPU占用&lt;5%,内存50%,内存用的比较多, cpu 用的比较少,可能是我的 agent 不多吧.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>通知尝试过 email slack pushbullet, 最终选择了 slack, 主要原因是: 便于管理,同类型的 event 放在同一个 channel 里,而且<code>网络通畅</code></p><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><p>可以先在<a href="http://huginnio.herokuapp.com/scenarios" target="_blank" rel="noopener">这里</a>看下,有一些共享出来的scenarios,就算需求不同,也可以学习下 agent 编写的语法,很有帮助.</p><h2 id="遇到的问题和解决"><a href="#遇到的问题和解决" class="headerlink" title="遇到的问题和解决"></a>遇到的问题和解决</h2><ul><li><p>bundle install error “invalid byte sequence in US-ASCII (ArgumentError)”</p><p>可以先执行这个设置语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=C.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">export LANGUAGE=en_US.UTF-8</span><br></pre></td></tr></table></figure></li><li><p>An error occurred while installing nokogiri (1.6.7.1), and Bundler cannot continue</p><p>sudo apt-get install build-essential patch ruby-dev zlib1g-dev liblzma-dev</p></li><li><p>需要 swap 分区</p><p>搜索”阿里云开启 swap”,<a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04</a></p></li><li><p>diagram加载不出来,挂掉</p><p>原因是访问不了 google 的 api,办法是下载离线的graphviz安装,<code>.env</code>修改<code>USE_GRAPHVIZ_DOT=dot</code>,重新执行<code>sudo bundle exec rake production:export</code></p><p>参考:<a href="https://github.com/huginn/huginn/issues/2109" target="_blank" rel="noopener">https://github.com/huginn/huginn/issues/2109</a></p></li><li><p>css 资源挂掉,界面很丑</p><p>先编译资源,<code>sudo -u huginn -H bundle exec rake assets:precompile RAILS_ENV=production</code>,直接重启,<code>sudo bundle exec rake production:restart</code></p></li><li><p>Mysql 设置 Innodb 出现 Unknown system variable ‘storage_engine</p><p>在/etc/mysql/my.cnf 中设置 [mysqld] default-storage-engine = InnoDB</p></li></ul><ul><li><p>时区设置</p><p>Schedule 的时间不是北京时间,<code>.env</code>修改 TIMEZONE=”Beijing”</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;我用的 ubuntu + mysql, 按照教程安装,中途出现了很多问题,遇到问题搜索,好不容易才解决.&lt;br&gt;机器配置是 1核+ 2G,日
      
    
    </summary>
    
      <category term="Huginn" scheme="https://blankeer.github.io/categories/Huginn/"/>
    
    
      <category term="Huginn" scheme="https://blankeer.github.io/tags/Huginn/"/>
    
  </entry>
  
  <entry>
    <title>Huginn Docker 安装笔记</title>
    <link href="https://blankeer.github.io/2018/03/22/Huginn-Docker-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
    <id>https://blankeer.github.io/2018/03/22/Huginn-Docker-安装笔记/</id>
    <published>2018-03-21T16:29:14.000Z</published>
    <updated>2018-03-21T16:35:11.365Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档:<a href="https://github.com/huginn/huginn/blob/master/doc/docker/install.md" target="_blank" rel="noopener">https://github.com/huginn/huginn/blob/master/doc/docker/install.md</a><br>官方文档没有详细说明 Docker 怎么和本机数据库连接的,以下是记录.</p><h1 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h1><p>安装官方文档安装</p><h1 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h1><p>安装完成后的配置:</p><ol><li>修改绑定 IP 为0.0.0.0, 修改<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>,<code>bind-address = 0.0.0.0</code>,重启 <code>sudo service mysql restart</code></li><li>允许 docker 访问本机数据库,本机先执行<code>ifconfig</code>看下 <code>docker0</code> 的 ip,一般是<code>172.17.0.1</code>,那么 docker ip 为<code>172.17.0.*</code>,这里自己看情况修改.然后在数据库里给这个网段 IP 操作权限,<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'172.17.0.%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'pass'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></li></ol><h1 id="安装-Huginn"><a href="#安装-Huginn" class="headerlink" title="安装 Huginn"></a>安装 Huginn</h1><ul><li>首次安装:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run  --name huginn \</span><br><span class="line">    -p 3000:3000 \</span><br><span class="line">    -e MYSQL_PORT_3306_TCP_ADDR=172.17.0.1 \</span><br><span class="line">    -e HUGINN_DATABASE_NAME=huginn \</span><br><span class="line">    -e HUGINN_DATABASE_USERNAME=root \</span><br><span class="line">    -e HUGINN_DATABASE_PASSWORD=pass \</span><br><span class="line">    huginn/huginn</span><br></pre></td></tr></table></figure></li></ul><p>如果安装中数据库报错,看下原因修改.<br>安装完成后,打开本机3000端口就可以进入首页.<br>之后再打开,直接 <code>docker start huginn</code>就行了.</p><ul><li><p>设置开机自启动:<br><code>docker update --restart=always huginn</code></p></li><li><p>自定义 .env.example 文件<br>在 docker run 下面加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run  --name huginn \</span><br><span class="line">    --env-file /本地路径/.env.example \</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官方文档:&lt;a href=&quot;https://github.com/huginn/huginn/blob/master/doc/docker/install.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hugin
      
    
    </summary>
    
      <category term="Huginn" scheme="https://blankeer.github.io/categories/Huginn/"/>
    
    
      <category term="Huginn" scheme="https://blankeer.github.io/tags/Huginn/"/>
    
      <category term="Docker" scheme="https://blankeer.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blankeer.github.io/2018/03/21/hello-world/"/>
    <id>https://blankeer.github.io/2018/03/21/hello-world/</id>
    <published>2018-03-21T11:59:30.194Z</published>
    <updated>2018-03-21T11:59:30.194Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>27--Remove-Element</title>
    <link href="https://blankeer.github.io/2018/01/23/27-Remove-Element/"/>
    <id>https://blankeer.github.io/2018/01/23/27-Remove-Element/</id>
    <published>2018-01-23T14:03:00.000Z</published>
    <updated>2018-04-02T12:57:43.408Z</updated>
    
    <content type="html"><![CDATA[<p>输入: 一个数组和一个数字<br>输出: 数组不包含该数字的长度,并修改原数组.<br>不能额外空间<br>思路: 循环遍历, l 为目标数组最右边元素,初始=0,当遇到 nums[i] != val 时, l++ 并赋值.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=val)&#123;</span><br><span class="line">                nums[l]=nums[i];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;输入: 一个数组和一个数字&lt;br&gt;输出: 数组不包含该数字的长度,并修改原数组.&lt;br&gt;不能额外空间&lt;br&gt;思路: 循环遍历, l 为目标数组最右边元素,初始=0,当遇到 nums[i] != val 时, l++ 并赋值.&lt;br&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>26--Remove-Duplicates-from-Sorted-Array</title>
    <link href="https://blankeer.github.io/2018/01/18/26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>https://blankeer.github.io/2018/01/18/26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2018-01-18T14:05:00.000Z</published>
    <updated>2018-04-02T12:57:28.367Z</updated>
    
    <content type="html"><![CDATA[<p>输入: 排好序的数组<br>输出: 返回不重复的个数,并修改数组为不重复的数组,要求不能使用额外的空间<br>思路: 循环判断前一个和当前是否相等,循环移动位置.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t=nums[<span class="number">0</span>],res=nums.length;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=-<span class="number">1</span>,count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length-count;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> item = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(item != t)&#123;</span><br><span class="line">                t = item;</span><br><span class="line">                r = i-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> len=r-l;</span><br><span class="line">                <span class="keyword">if</span>(len&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">                    move(nums,l,r);</span><br><span class="line">                    count+=len;</span><br><span class="line">                &#125;</span><br><span class="line">                i-=len;</span><br><span class="line">                l = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        r = nums.length-count-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len=r-l;</span><br><span class="line">        <span class="keyword">if</span>(len&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            move(nums,l,r);</span><br><span class="line">            count+=len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res - count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=r-l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;nums.length-len;i++)&#123;</span><br><span class="line">            nums[i]=nums[i+len];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;输入: 排好序的数组&lt;br&gt;输出: 返回不重复的个数,并修改数组为不重复的数组,要求不能使用额外的空间&lt;br&gt;思路: 循环判断前一个和当前是否相等,循环移动位置.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>24--Swap-Nodes-in-Pairs</title>
    <link href="https://blankeer.github.io/2018/01/16/24-Swap-Nodes-in-Pairs/"/>
    <id>https://blankeer.github.io/2018/01/16/24-Swap-Nodes-in-Pairs/</id>
    <published>2018-01-16T15:25:00.000Z</published>
    <updated>2018-04-02T12:57:07.678Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/swap-nodes-in-pairs/description/" target="_blank" rel="noopener">https://leetcode.com/problems/swap-nodes-in-pairs/description/</a><br>输入: 一个链表<br>输出: 每两位颠倒<br>要求: 不能使用额外空间,不能修改节点的值,只能修改引用</p><p>思路: 循环修改 next 即可,一次 AC<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode current=head,next,nextnext;</span><br><span class="line">        ListNode result=<span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode pre=result;</span><br><span class="line">        result.next = head;</span><br><span class="line">        <span class="keyword">while</span>(current!=<span class="keyword">null</span>&amp;&amp;(next=current.next)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            nextnext = next.next;</span><br><span class="line">            pre.next=next;</span><br><span class="line">            next.next=current;</span><br><span class="line">            current.next=nextnext;</span><br><span class="line">            pre=current;</span><br><span class="line">            current = nextnext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/swap-nodes-in-pairs/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/swa
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>22--Generate-Parentheses</title>
    <link href="https://blankeer.github.io/2018/01/04/22-Generate-Parentheses/"/>
    <id>https://blankeer.github.io/2018/01/04/22-Generate-Parentheses/</id>
    <published>2018-01-04T13:54:00.000Z</published>
    <updated>2018-04-02T12:56:43.528Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/generate-parentheses/description/" target="_blank" rel="noopener">https://leetcode.com/problems/generate-parentheses/description/</a><br>输入: 数字 n<br>处理: n 对括号()的排列<br>输出: 所有成对的结果<br>思路: n 对括号,字符串长度就是2*n,每位是<code>(</code>或<code>)</code>,由于 n 是参数动态的,所以不能采取循环,只能采取递归回溯实现,过程中需要剪枝.预处理左括号是1,右括号是-1,这样只要最终每位之和等于0就匹配了<br>剪枝条件:</p><ol><li>当前总和=0时,下一位只能是1,因为如果是-1后面再多都不会匹配</li><li>当前总和&lt;0时,直接剪枝</li><li>当前总和&gt;n时,直接剪枝,因为后面即使都是-1,总和也是大于0的</li><li>当前总和=n时,下一位只能是-1,因为如果是1,总和不会=0</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] arr=&#123;<span class="string">'('</span>,<span class="string">')'</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] values=&#123;<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    List&lt;String&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        res= <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        fun(<span class="number">0</span>,n,<span class="number">0</span>,<span class="keyword">new</span> StringBuilder());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> n,<span class="keyword">int</span> sum,StringBuilder sb)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==n*<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</span><br><span class="line">                res.add(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">            sum = call(i,arr[<span class="number">0</span>],values[<span class="number">0</span>],sb,sum,n);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; n)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; n)&#123;</span><br><span class="line">                sum = call(i,arr[<span class="number">0</span>],values[<span class="number">0</span>],sb,sum,n);</span><br><span class="line">            &#125;</span><br><span class="line">            sum = call(i,arr[<span class="number">1</span>],values[<span class="number">1</span>],sb,sum,n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">call</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">char</span> c,<span class="keyword">int</span> val,StringBuilder sb,<span class="keyword">int</span> sum,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        sb.append(c);</span><br><span class="line">        sum+=val;</span><br><span class="line">        fun(i+<span class="number">1</span>,n,sum,sb);</span><br><span class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        sum-=val;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/generate-parentheses/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/ge
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>21--Merge-Two-Sorted-Lists</title>
    <link href="https://blankeer.github.io/2017/12/21/21-Merge-Two-Sorted-Lists/"/>
    <id>https://blankeer.github.io/2017/12/21/21-Merge-Two-Sorted-Lists/</id>
    <published>2017-12-21T13:31:00.000Z</published>
    <updated>2018-04-02T12:56:23.139Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">https://leetcode.com/problems/merge-two-sorted-lists/description/</a><br>输入: 两个排好序的链表<br>输出: 两个链表连接起来,并且是排好序的</p><p>思路:<br>循环遍历两个链表,判断当前节点的大小,需要注意长度不等<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode i=l1,j=l2,item=res;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="keyword">null</span>&amp;&amp;j!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i.val&lt;j.val)&#123;</span><br><span class="line">                    item.next=i;</span><br><span class="line">                    i=i.next;</span><br><span class="line">                    item=item.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    item.next=j;</span><br><span class="line">                    j=j.next;</span><br><span class="line">                    item=item.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="keyword">null</span>)&#123;</span><br><span class="line">                item.next=i;</span><br><span class="line">                i=i.next;</span><br><span class="line">                item=item.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="keyword">null</span>)&#123;</span><br><span class="line">                item.next=j;</span><br><span class="line">                j=j.next;</span><br><span class="line">                item=item.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">while</span>(i!=<span class="keyword">null</span>||j!=<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>20--Valid-Parentheses</title>
    <link href="https://blankeer.github.io/2017/12/20/20-Valid-Parentheses/"/>
    <id>https://blankeer.github.io/2017/12/20/20-Valid-Parentheses/</id>
    <published>2017-12-20T14:06:00.000Z</published>
    <updated>2018-04-02T12:56:08.160Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="noopener">https://leetcode.com/problems/valid-parentheses/description/</a><br>输入: 字符串包含 <code>{}[]()</code><br>处理:成对出现<br>输出:是否成对<br>思路:<br>就是一个算数表达式成对问题,栈解决就好了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;Character&gt; stack=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;stack.size()&gt;<span class="number">0</span>&amp;&amp;isMarch(stack.get(stack.size()-<span class="number">1</span>),c))&#123;</span><br><span class="line">                stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">')'</span>||c==<span class="string">'&#125;'</span>||c==<span class="string">']'</span>)&#123;<span class="comment">//如果某步加入的是后者,那么肯定是不匹配的</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMarch</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a+b==<span class="string">'('</span>+<span class="string">')'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a+b==<span class="string">'&#123;'</span>+<span class="string">'&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a+b==<span class="string">'['</span>+<span class="string">']'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parentheses/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/valid
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>18--4Sum</title>
    <link href="https://blankeer.github.io/2017/12/19/18-4Sum/"/>
    <id>https://blankeer.github.io/2017/12/19/18-4Sum/</id>
    <published>2017-12-19T13:46:00.000Z</published>
    <updated>2018-04-02T12:55:52.689Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/4sum/description/" target="_blank" rel="noopener">https://leetcode.com/problems/4sum/description/</a><br>输入: 数组 和 target<br>输出: 4个数字相加等于 target 的所有组合</p><p>和3sum 一样,多了个循环<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length-<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> k=j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> m=nums.length-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(k&lt;m)&#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[i]+nums[j]+nums[k]+nums[m];</span><br><span class="line">                    <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[i],nums[j],nums[k],nums[m]));</span><br><span class="line">                        <span class="keyword">while</span>(m-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;nums[m]==nums[--m]);</span><br><span class="line">                        <span class="keyword">while</span>(k+<span class="number">1</span>&lt;nums.length&amp;&amp;nums[k]==nums[++k]);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        m--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        k++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/4sum/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/4sum/description/&lt;
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>15--3Sum</title>
    <link href="https://blankeer.github.io/2017/12/14/15-3Sum/"/>
    <id>https://blankeer.github.io/2017/12/14/15-3Sum/</id>
    <published>2017-12-14T13:14:00.000Z</published>
    <updated>2018-04-02T12:55:36.443Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/3sum/description/" target="_blank" rel="noopener">https://leetcode.com/problems/3sum/description/</a><br>输入: 数组<br>输出: 3个数加起来等于0 的所有情况</p><p>思路:<br>首先从小到大排序<br>3个数分别是  i,j,k<br>i 从 0~length-2 下标循环<br>j 和 k 分别取  i+1 和 length-1<br>然后 判断 i ,j, k 三个数和0比大小<br>如果等于0 , 加入结果集<br>如果&gt;0,k–<br>如果&lt;0,j++<br>需要注意的是重复的情况,比如   -4 -1 -1 0 1<br>两个 -1 会导致 重复的 {-1 0 1}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> lasti=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==lasti)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            lasti=nums[i];</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>,k=nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = add(nums,i,j,k);</span><br><span class="line">                <span class="keyword">if</span>(temp==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> lastk=nums[k];</span><br><span class="line">                    <span class="keyword">int</span> lastj=nums[j];</span><br><span class="line">                    res.add(Arrays.asList(nums[i],lastj,lastk));</span><br><span class="line">                    <span class="keyword">while</span>(k&gt;j&amp;&amp;nums[--k]==lastk);</span><br><span class="line">                    <span class="keyword">while</span>(j&gt;k&amp;&amp;nums[++j]==lastj);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[i]+nums[j]+nums[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/3sum/description/&lt;
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>14--Longest-Common-Prefix</title>
    <link href="https://blankeer.github.io/2017/11/16/14-Longest-Common-Prefix/"/>
    <id>https://blankeer.github.io/2017/11/16/14-Longest-Common-Prefix/</id>
    <published>2017-11-16T14:10:00.000Z</published>
    <updated>2018-04-02T12:55:18.694Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-common-prefix/discuss/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-common-prefix/discuss/</a><br>输入: 字符串数组<br>输出: 求公共最长前缀字符串</p><p>思路:<br>先取出第0个 string, 依次比较后面的字符串,求公共前缀<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs.length ==<span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs[<span class="number">0</span>].length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c=strs[<span class="number">0</span>].charAt(i);</span><br><span class="line">            <span class="keyword">boolean</span> isbreak = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;strs.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[j].length()&lt;=i||strs[j].charAt(i)!=c)&#123;</span><br><span class="line">                    isbreak=<span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isbreak)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-common-prefix/discuss/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/longe
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>9--Palindrome-Number</title>
    <link href="https://blankeer.github.io/2017/11/15/9-Palindrome-Number/"/>
    <id>https://blankeer.github.io/2017/11/15/9-Palindrome-Number/</id>
    <published>2017-11-15T13:55:00.000Z</published>
    <updated>2018-04-02T12:47:43.485Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/palindrome-number/discuss/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-number/discuss/</a><br>判断一个数字是否是回文数<br>思路:<br>将数字逆序,判断是否相等.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> source=x;</span><br><span class="line">        <span class="keyword">while</span>(source!=<span class="number">0</span>)&#123;</span><br><span class="line">            res=res*<span class="number">10</span>+source%<span class="number">10</span>;</span><br><span class="line">            source=source/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x==res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的 ac 了…<br>看了下讨论,还有简单的做法.<br>回文数只有两种情况: 位数是偶数 or 奇数<br>位数是偶数情况:  abccba, 存在一个位置,使得左边的数字 abc 和右边数字 cba 互为逆数<br>位数是奇数情况: abcdcba,存在一个位置,使得左边的数字 abc 和右边数字 dcba 的逆数/10 相等<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> source=x;</span><br><span class="line">        <span class="keyword">while</span>(source&gt;res)&#123;</span><br><span class="line">            res=res*<span class="number">10</span>+source%<span class="number">10</span>;</span><br><span class="line">            source=source/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> source==res || source == res/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/palindrome-number/discuss/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/palindrom
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>8--String-to-Integer-(atoi)</title>
    <link href="https://blankeer.github.io/2017/11/14/8-String-to-Integer-atoi/"/>
    <id>https://blankeer.github.io/2017/11/14/8-String-to-Integer-atoi/</id>
    <published>2017-11-14T14:50:00.000Z</published>
    <updated>2018-04-02T12:54:55.741Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/string-to-integer-atoi/discuss/" target="_blank" rel="noopener">https://leetcode.com/problems/string-to-integer-atoi/discuss/</a><br>实现 atoi 函数<br>思路:<br>循环按位解析,需要手动判断溢出等情况,写的有点乱,之后再精简下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str = str.trim();</span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> startIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(<span class="number">0</span>)==<span class="string">'-'</span>)&#123;</span><br><span class="line">            fu=-<span class="number">1</span>;</span><br><span class="line">            startIndex=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(<span class="number">0</span>)==<span class="string">'+'</span>)&#123;</span><br><span class="line">            startIndex=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=startIndex;i&lt;str.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c=str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(isNumber(c))&#123;</span><br><span class="line">                <span class="keyword">int</span> n=c-<span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">if</span>(fu==<span class="number">1</span> &amp;&amp; ( number*<span class="number">10</span>&gt;=(Integer.MAX_VALUE-n) || number&gt;Integer.MAX_VALUE/<span class="number">10</span> ))&#123;</span><br><span class="line">                    number=Integer.MAX_VALUE;</span><br><span class="line">                    <span class="keyword">return</span> number;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fu==-<span class="number">1</span> &amp;&amp; (-<span class="number">10</span>*number&lt;=(Integer.MIN_VALUE+n)|| number&gt;Integer.MIN_VALUE/-<span class="number">10</span> ))&#123;</span><br><span class="line">                    number=Integer.MIN_VALUE;</span><br><span class="line">                    <span class="keyword">return</span> number;</span><br><span class="line">                &#125;</span><br><span class="line">                number=number*<span class="number">10</span>+n;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> fu*number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/string-to-integer-atoi/discuss/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/stri
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>7--Reverse-Integer</title>
    <link href="https://blankeer.github.io/2017/11/13/7-Reverse-Integer/"/>
    <id>https://blankeer.github.io/2017/11/13/7-Reverse-Integer/</id>
    <published>2017-11-13T14:55:00.000Z</published>
    <updated>2018-04-02T12:54:36.810Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-integer/description/</a><br>输入: 32位有符号 int<br>输出: 逆序<br>思路:<br>循环取余就可以实现了,需要注意溢出的情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = x;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(t!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = num*<span class="number">10</span> + t%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>((temp-t%<span class="number">10</span>)/<span class="number">10</span> != num)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num = temp;</span><br><span class="line">            t=t/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/reverse
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>3--Longest-Substring-Without-Repeating-Characters</title>
    <link href="https://blankeer.github.io/2017/11/09/3-Longest-Substring-Without-Repeating-Characters/"/>
    <id>https://blankeer.github.io/2017/11/09/3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2017-11-09T14:26:00.000Z</published>
    <updated>2018-04-02T12:53:46.284Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-substring-without-repeating-characters/description/</a><br>输入: 字符串<br>处理: 寻找不包含重复字符的最长子串<br>输出: 最长子串的长度</p><p>思路:<br>1.左指针始终指向当前子串的最左边,<br>2.判断当前字符是否包含在当前子串中,如果在,左指针等于前面重复字符的下标+1,<br>3.否则继续判断下一位字符<br>4.记录每次子串长度的最大值<br>其中第2步,可以简化为 <code>当前左指针下标</code> 和 <code>重复字符下标+1</code> 的最大值,因为: 如果当前字符不包含在当前子串中,而是在子串之前,求个最大值,也没什么不妥,代码看起来简洁很多.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                left=Math.max(left,map.get(c)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max,i-left+<span class="number">1</span>);</span><br><span class="line">            map.put(c,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2--Add-Two-Numbers</title>
    <link href="https://blankeer.github.io/2017/11/08/2-Add-Two-Numbers/"/>
    <id>https://blankeer.github.io/2017/11/08/2-Add-Two-Numbers/</id>
    <published>2017-11-08T15:41:00.000Z</published>
    <updated>2018-04-02T12:48:37.091Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener">https://leetcode.com/problems/add-two-numbers/description/</a><br>输入: 两个链表,每个节点上有一个 val 值<br>处理: 将对应节点的值加起来,结果保留个位,如果有进位,加到下一个节点上<br>输出: 相加的结果链表</p><p>思路:<br>加起来就行了,需要记录相加的值,并和10相除取余保存处理.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode result = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode temp1 = l1;</span><br><span class="line">        ListNode temp2 = l2;</span><br><span class="line">        ListNode temp3 = result;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp1!=<span class="keyword">null</span> || temp2!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                num+=temp1.val;</span><br><span class="line">                temp1 = temp1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp2!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                num+=temp2.val;</span><br><span class="line">                temp2 = temp2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode item = <span class="keyword">new</span> ListNode(num%<span class="number">10</span>);</span><br><span class="line">            temp3.next = item;</span><br><span class="line">            temp3 = temp3.next;</span><br><span class="line">            num=num/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">            ListNode item = <span class="keyword">new</span> ListNode(num);</span><br><span class="line">            temp3.next = item;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/add-two
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>1--Two-Sum</title>
    <link href="https://blankeer.github.io/2017/11/08/1-Two-Sum/"/>
    <id>https://blankeer.github.io/2017/11/08/1-Two-Sum/</id>
    <published>2017-11-08T15:12:00.000Z</published>
    <updated>2018-04-02T12:46:31.770Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener">https://leetcode.com/problems/two-sum/description/</a><br>输入: nums 数组 ,和 target 整型<br>处理: 找到 nums 中两个数字相加等于 target<br>输出: 输入这两个数字的下标</p><ul><li><p>思路1<br>循环两次,判断相加是否等于 target</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思路2<br>看了讨论才想到的,惭愧,只需要 O(n),利用 HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(target-nums[i]),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>类似数字对应的题目都可以考虑用下哈希表,可能会有很好的做法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/two-sum/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/two-sum/descrip
      
    
    </summary>
    
      <category term="刷题" scheme="https://blankeer.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://blankeer.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit源码分析笔记</title>
    <link href="https://blankeer.github.io/2017/05/21/Retrofit%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
    <id>https://blankeer.github.io/2017/05/21/Retrofit源码分析笔记/</id>
    <published>2017-05-21T13:22:20.000Z</published>
    <updated>2018-04-02T12:44:11.137Z</updated>
    
    <content type="html"><![CDATA[<p>Retrofit Version:<a href="https://github.com/square/retrofit/releases/tag/parent-2.2.0" target="_blank" rel="noopener">2.2.0</a><br>分析代码地址:<a href="https://github.com/Blankeer/source-analysis-retrofit" target="_blank" rel="noopener">https://github.com/Blankeer/source-analysis-retrofit</a></p><ol><li>环境配置相关：<ul><li>发现项目是基于Maven的，于是祭出许久不用的Idea</li><li>删掉了部分对源码无用的配置文件，比如website/,CHANGELOG.md等</li></ul></li><li><p>samples分析</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHub</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors"</span>)</span><br><span class="line">    Call&lt;List&lt;Contributor&gt;&gt; contributors(</span><br><span class="line">            <span class="meta">@Path</span>(<span class="string">"owner"</span>) String owner,</span><br><span class="line">            <span class="meta">@Path</span>(<span class="string">"repo"</span>) String repo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create a very simple REST adapter which points the GitHub API.</span></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(API_URL)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// Create an instance of our GitHub API interface.</span></span><br><span class="line">GitHub github = retrofit.create(GitHub.class);</span><br><span class="line"><span class="comment">// Create a call instance for looking up Retrofit contributors.</span></span><br><span class="line">Call&lt;List&lt;Contributor&gt;&gt; call = github.contributors(<span class="string">"square"</span>, <span class="string">"retrofit"</span>);</span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;List&lt;Contributor&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;List&lt;Contributor&gt;&gt; call, Response&lt;List&lt;Contributor&gt;&gt; response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Contributor contributor : response.body()) &#123;</span><br><span class="line">            System.out.println(contributor.login + <span class="string">" ("</span> + contributor.contributions + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;List&lt;Contributor&gt;&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 这是最简单的用法,使用步骤:</p><ol><li>定义一个 API 的 Interface.包含 API 的基本信息(url,method,path,call,返回类型等)</li><li>实例化Retrofit对象,配置 baseUrl 和 ConverterFactory</li><li>通过 retrofit.create 方法创建 API 实例对象</li><li>直接调用具体的 api 方法得到 Call 对象,调用enqueue方法传入回调</li></ol></li><li><p>基本函数调用链</p><ul><li>Retrofit.Build 建造者模式</li><li>Retrofit.create() 创建相应Api interface<ul><li>eagerlyValidateMethods 校验解析所有method,即定义的每个api method<ul><li>ServiceMethod.build() 解析interface所有method，每个method的参数封装成ServiceMethod<ul><li>ServiceMethod.createCallAdapter() 每个method寻找匹配的CallAdapter，即返回值转换器<ul><li>Retrofit.callAdapter() 遍历retrofit配置过的adapter，寻找匹配的那个<ul><li>Retrofit.nextCallAdapter()</li></ul></li></ul></li><li>ServiceMethod.createResponseConverter() 创建response转换器<ul><li>Retrofit.responseBodyConverter() 寻找匹配的responseConverter<ul><li>Retrofit.nextResponseBodyConverter()</li></ul></li></ul></li><li>ServiceMethod.parseMethodAnnotation() 解析标记方法的每个注解，比如Get,Post等常见注解就是在这里解析<ul><li>ServiceMethod.parseHttpMethodAndPath() 解析具体的Http注解和path，比如GET<ul><li>ServiceMethod.parsePathParameters() 解析url包含的路径参数，即{path}，params必须包含@Path</li></ul></li><li>ServiceMethod.parseHeaders() 解析head，通过@Headers判断</li></ul></li><li>ServiceMethod.parseParameter() 解析每个param,返回ParameterHandler<ul><li>ServiceMethod.parseParameterAnnotation() 解析参数的具体注解,常见的有@path,@query等,requestConverter和stringConverter在这会被调用<ul><li>ParameterHandler 这个类主要是api方法参数的各种具体处理，添加到RequestBuilder</li></ul></li></ul></li></ul></li></ul></li><li>Proxy.newProxyInstance() 动态代理，代理整个Api interface，当我们调用api方法时，会调用这个代理的invoke()方法，这是retrofit的核心<ul><li>OkHttpCall OKHttp具体请求网络的地方,拿出初始化传入的OkHttpClient，拿出ServiceMethod.toRequest()的Request，然后怼到一起，调用okhttp的api进行网络请求和回调处理，在parseResponse()中会调用responseConverter</li><li>CallAdapter.adapt() Android默认的CallAdapter在ExecutorCallAdapterFactory里，返回的是Call<t>,另外提供的有RxJava2CallAdapter,返回值是Observable</t></li></ul></li></ul></li></ul></li><li><p>关键点的代码查看</p><ol><li><p>为什么只用定义一个interface，达到直接调用的效果<br> 利用了Java动态代理机制,和 AOP 一个原理，相关代码在Retrofit.create();</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;service&#125;,</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="keyword">private</span> <span class="keyword">final</span> Platform platform = Platform.get();</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">                            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">//......</span></span><br><span class="line">                        <span class="comment">//NOTE-Blanke: 加载这个method，如果设置validateEagerly=true,这里是直接获取serviceMethodCache里的缓存</span></span><br><span class="line">                        ServiceMethod&lt;Object, Object&gt; serviceMethod =</span><br><span class="line">                                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</span><br><span class="line">                        <span class="comment">//NOTE-Blanke: 默认http调用OKHttp，这里可以扩展，换成别家的http框架</span></span><br><span class="line">                        OkHttpCall&lt;Object&gt; okHttpCall = <span class="keyword">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br><span class="line">                        <span class="keyword">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure></li><li><p>平常使用最多的是json，相关转换代码<br> 以Gson解析为例,相关代码在retrofit2.converter.gson.</p><ul><li>requestConvert<br>  见GsonRequestBodyConverter<br>  具体的转换代码在ParameterHandler.Body，具体调用链是ServiceMethod.parseParameterAnnotation()-&gt;new Body,ServiceMethod.toRequest()-&gt;Body.apply();</li><li>responseConvert<br>  见GsonResponseBodyConverter<br>  具体转换代码在ServiceMethod.toResponse().具体调用链是OkHttpCall.parseResponse()-&gt;ServiceMethod.toResponse();</li></ul></li><li>自定义CallAdapter相关<br>默认的是ExecutorCallAdapterFactory匿名类，默认的返回类型是Call.<br>调用链是Retrofit.create():<code>serviceMethod.callAdapter.adapt(okHttpCall)</code><br>RxJava是RxJava2CallAdapter，返回类型是Observable<br>自定义demo见ErrorHandlingAdapter</li></ol></li><li>发现的设计模式<ul><li>建造者模式 出现的Builder类</li><li>工厂模式 以Factory结尾的类</li><li>代理模式 ExecutorCallbackCall，Retrofit.create()用到了动态代理</li><li>策略模式 Converter,CallAdapter等的实现</li><li>适配器模式 ErrorHandlingAdapter.MyCallAdapter</li><li>迭代器模式 ParameterHandler</li><li>外观模式 Retrofit</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Retrofit Version:&lt;a href=&quot;https://github.com/square/retrofit/releases/tag/parent-2.2.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2.2.0&lt;/a&gt;&lt;br&gt;分析代码地
      
    
    </summary>
    
      <category term="Android" scheme="https://blankeer.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blankeer.github.io/tags/Android/"/>
    
      <category term="Retrofit" scheme="https://blankeer.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 1.x 源码分析</title>
    <link href="https://blankeer.github.io/2017/05/21/RxJava-1-x-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://blankeer.github.io/2017/05/21/RxJava-1-x-源码分析/</id>
    <published>2017-05-21T12:39:36.000Z</published>
    <updated>2018-04-02T12:43:42.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Demo-分析"><a href="#Demo-分析" class="headerlink" title="Demo 分析"></a>Demo 分析</h2><p>最简单的 demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.OnSubscribe sourceOnSubscribe = <span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Hi"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Observable sourceObservable = Observable.create(sourceOnSubscribe);</span><br><span class="line">Subscriber&lt;String&gt; targetSubscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">sourceObservable.subscribe(targetSubscriber);</span><br></pre></td></tr></table></figure></p><p>没有进行简写,每个中间变量都赋予了名字,方便后面说明.</p><p>demo的输出结果就是 Hello Hi Completed!</p><h2 id="基本-demo-的函数调用链"><a href="#基本-demo-的函数调用链" class="headerlink" title="基本 demo 的函数调用链"></a>基本 demo 的函数调用链</h2><p>分析上述最简单的 demo, 分析中不看 部分与性能、兼容性、扩展性有关的代码和函数调用,仅关注核心代码和调用,<br>在相关源码里,关键部分有相关注释说明.</p><p>先上图.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://plantuml.com/plantuml/png/bP0n3i8m34Ntd29ZCb1s1XR4IeToWIIr42A9aUjGZa-1gereEh1-_UTdsoJ6c8854iOnaWmW0iZDNdQOo44TcsGxHrSBSYSZz39BL5LLUgpNjWDw6ElVFKTW6DHYX1PPRNRaw4Sn1QKHNnyRkW1FCOte7EJB5JpTTCJl92qMzR8FOpEahCf0wN_EUB_kowehV8koHxgLWUA69tYoEki_Y0E6kmU6LkajnYCHaXg-_W80" alt="demo" title="">                </div>                <div class="image-caption">demo</div>            </figure><ol><li>实例化 Observable.OnSubscribe , 记为 sourceOnSubscribe.</li><li>调用 Observable.create 静态方法</li><li>create()内部会实例化 Observable 对象,需要传入sourceOnSubscribe,将其返回值记为 sourceObservable.</li><li>实例化 Subscriber , 记为 targetSubscriber.</li><li>调用 sourceObservable.subscribe(targetSubscriber) 方法,这是将观察者和观察源建立联系的地方,订阅.</li><li>sourceObservable 会首先调用 targetSubscriber.onStart() 方法.</li><li>sourceObservable 调用 sourceOnSubscribe 的 call(targetSubscriber)方法, 就是上面我们自定义的地方,执行到我们写的代码附近了.</li><li>执行相关逻辑,上面 demo 中什么都没做,这里需要我们自己实现具体逻辑.</li><li>调用 <code>targetSubscriber.onNext(T)</code> 方法,这里也是上面 demo 里自己实现的地方.</li><li><code>targetSubscriber.onCompleted()</code> or <code>targetSubscriber.onError(e)</code>,整个流程跑完了.</li></ol><p>整个调用流程其实并不复杂,跟踪下来还是很容易的,RxJava 在内部也没做太多的事.</p><h2 id="深入使用的源码分析"><a href="#深入使用的源码分析" class="headerlink" title="深入使用的源码分析"></a>深入使用的源码分析</h2><p>RxJava 最强大的就是操作符 和 线程操作,接下来看看这部分.</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul><li><p>map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Func1 mapFun=<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer number)</span> </span>&#123; <span class="comment">// 参数类型 int</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"number "</span> + number; <span class="comment">// 返回类型 String</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">Action1 action1=<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123; <span class="comment">// 参数类型 String</span></span><br><span class="line">                Log.i(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.map(mapFun)</span><br><span class="line">.subscribe(action1);</span><br></pre></td></tr></table></figure><p><img src="http://plantuml.com/plantuml/png/ZLAzJiCm4Dxp51uT2SJEq0N1LYe1Bt1s3gY8xUXijpm-Hzk4EBwW3bdklZz_5yWf-EmCKWCs1L8E6uVgTgDYo6HnPoBI0KoFwbuv63H_JzctJRLcIl2lsKHBUuDR69ZWyQXsnL2dptsy-K-4TuMf9OI4kjHkBo6Nu3XYT0Bwm3HnY1a5bibB2FFPXQT92-ZgSHRwNh1PuCuX2vFVLhRpMQKo5LIB2Q6XwtJX8V64SsOVuHqdu59ZvJWhVKdeo-mlozYQx3J3hP2xe8w1lcH2dUqPlvD-EzrojZb3kTunZOGG_usJtajxhVr3S4EF2JlTtWN_I1H8uxLUA-Jc1m00" alt="map"></p></li></ul><ol><li>调用 map(mapFun)</li><li>map 方法内部实例化 OnSubscribeMap ,传入 this (Observable) 和 mapFun.</li><li>调用 Observable.create 方法,生成新的 MapObservable</li><li>我们调用 subscribe 时,实际上调用的是 MapObservable.subscribe().</li><li>回调 onStart()</li><li>调用 onSubscribeMap 的 call()</li><li>生成一个新的 mapSubscriber ,之后会订阅原来的 Observable.</li><li>关联两个 subscriber 的 unsubscribe()</li><li>用新的 mapSubscriber 订阅原来的 Observable.</li><li>原来的 Observable 回调 mapSubscriber的 onStart()</li><li>调用原来的 OnSubscribe.call()</li><li>OnSubscribe 内部的执行逻辑</li><li>调用 mapSubscriber 的 onNext(T)</li><li>mapSubscriber 会调用 mapFun.call(T) 返回 R</li><li>mapSubscriber 调用真正的 targetSubscriber.onNext(R),R 是转换后的数据</li></ol><p>看流程有点复杂,其实也很简单,就是 map 在观察源和观察者之前做了一层转换,当发生订阅时,观察者订阅的不是真正的观察源,<br>而是 map 内部的’转换观察源’,’转换观察源’内部会再去订阅真正的观察源,然后将观察源返回的数据通过转换函数<code>mapFun</code>转换,<br>再返回给我们定义的观察者.</p><ul><li><p>lift 变换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer number)</span> </span>&#123; <span class="comment">// 参数类型 int</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"number "</span> + number; <span class="comment">// 返回类型 String</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Observable&lt;Integer&gt; observable = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        observable.lift(<span class="keyword">new</span> Observable.Operator&lt;String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span><span class="comment">//这个参数 subscriber,就是最终的,也就是我们使用时传入的</span></span><br><span class="line">            <span class="keyword">public</span> Subscriber&lt;? <span class="keyword">super</span> Integer&gt; call(<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                        subscriber.onNext(<span class="string">"number "</span> + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.d(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这个例子功能和上面 map 的例子相同,都是将数字变为字符串.</p><p><img src="http://plantuml.com/plantuml/png/ZPAz3e8m4CTtdg9ZIGHt1nVZPYHHNw2jfo4MIev3VNoBKgLG32FNt_-ZFKH3fcmA2HW9HGPP0L41B5apKm6ATh9Y9JnOrdtoD4tZ3gbDWmeoMGFUXTHWKPrVY3jf78s8rhWyDh9Mc4lOMThv-rFUenR__Tf8huD240HyaEDAZ_3QKPm4Ne6-AfitWAryo5W36sIdn4Fu-B9AQ1r86eB-1gP4ZaY2KMsT7nwAy0dlBW6wU_tVWMlcstpNr0Cdr6V37WPlOK6Wt1wUn4-VX-uTJUtbZH_YsVORKrGQ2CuyNffoYsZ_TvYTDg5-0G00" alt="lift"></p><p>整体流程和 map 类似,都是生成一个中间 Subscriber ,去订阅原来的 Observable,<br>然后在 onNext 等方法里将数据处理转换之后,回调真正的 Subscriber.</p></li></ul><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><pre><code>- subscribeOn()  `OperatorSubscribeOn` 新建了一个 OnSubscribe,执行 call() 即产生事件.即 OperatorSubscribeOn,内部调用了线程相关.- observeOn()  使用了 lift 操作符, operator 是 `OperatorObserveOn`.内部也是线程相关代码.</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Demo-分析&quot;&gt;&lt;a href=&quot;#Demo-分析&quot; class=&quot;headerlink&quot; title=&quot;Demo 分析&quot;&gt;&lt;/a&gt;Demo 分析&lt;/h2&gt;&lt;p&gt;最简单的 demo&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="Android" scheme="https://blankeer.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blankeer.github.io/tags/Android/"/>
    
      <category term="RxJava" scheme="https://blankeer.github.io/tags/RxJava/"/>
    
  </entry>
  
</feed>
